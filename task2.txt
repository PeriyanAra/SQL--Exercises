1.1 Select the names of all the products in the store.
SELECT Name FROM Products 

1.2 Select the names and the prices of all the products in the store.
SELECT Name, Price FROM Products

1.3 Select the name of the products with a price less than or equal to $200.
SELECT Name FROM Products WHERE Price <= 200

1.4 Select all the products with a price between $60 and $120.
SELECT * FROM Products WHERE Price BETWEEN 60 AND 120

1.5 Select the name and price in cents (i.e., the price must be multiplied by 100).
SELECT Name, Price * 100 FROM Products

1.6 Compute the average price of all the products.
SELECT AVG(Price) FROM Products

1.7 Compute the average price of all products with manufacturer code equal to 2.
SELECT AVG(Price) FROM Products WHERE Manufacturer = 2

1.8 Compute the number of products with a price larger than or equal to $180.
SELECT COUNT(*) FROM Products WHERE Price >= 180

1.9 Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name (in ascending order).
SELECT Name, Price FROM Products WHERE Price >= 180 ORDER BY price, name

1.10 Select all the data from the products, including all the data for each product's manufacturer.
SELECT * FROM Products LEFT JOIN Manufacturers ON Products.Manufacturer = Manufacturers.Code

1.11 Select the product name, price, and manufacturer name of all the products.
SELECT Products.Name, Products.Price, Manufacturers.Name FROM Products LEFT JOIN Manufacturers ON Products.Manufacturer = Manufacturers.Code

1.12 Select the average price of each manufacturer's products, showing only the manufacturer's code.
SELECT Manufacturer, AVG(Price) FROM Products GROUP BY Manufacturer

1.13 Select the average price of each manufacturer's products, showing the manufacturer's name.
SELECT Manufacturers.Name, AVG(Products.Price) FROM Products LEFT JOIN Manufacturers ON Products.Manufacturer = Manufacturers.code GROUP BY Products.Manufacturer

1.14 Select the names of manufacturer whose products have an average price larger than or equal to $150.
SELECT Manufacturers.Name, AVG(Products.Price) FROM Manufacturers LEFT JOIN Products ON Products.Manufacturer = Manufacturers.code GROUP BY Manufacturers.name HAVING AVG(Products.Price) >= 150

1.15 Select the name and price of the cheapest product.
SELECT Name, Price FROM Products ORDER BY Price LIMIT 1

1.16 Select the name of each manufacturer along with the name and price of its most expensive product.


1.17 Add a new product: Loudspeakers, $70, manufacturer 2.
INSERT INTO Products VALUES (11, 'Loudspeakers', 70, 2)

1.18 Update the name of product 8 to "Laser Printer".
UPDATE Products SET Name = 'Laser Printer' WHERE Code = 8

1.19 Apply a 10% discount to all products.
UPDATE Products SET Price = Price - Price * 10 / 100

1.20 Apply a 10% discount to all products with a price larger than or equal to $120.
UPDATE Products SET Price = Price - Price * 10 / 100 WHERE Price >= 120



2.1 Select the last name of all employees.
SELECT lastName FROM Employees

2.2 Select the last name of all employees, without duplicates.
SELECT DISTINCT lastName FROM Employees

2.3 Select all the data of employees whose last name is "Smith".
SELECT * FROM Employees WHERE LastName = 'Smith'

2.4 Select all the data of employees whose last name is "Smith" or "Doe".
SELECT * FROM Employees WHERE LastName = 'Smith' OR  LastName = 'Doe'

2.5 Select all the data of employees that work in department 14.
SELECT * FROM Employees WHERE Department = 14

2.6 Select all the data of employees that work in department 37 or department 77.
SELECT * FROM Employees WHERE Department = 37 OR Department = 77

2.7 Select all the data of employees whose last name begins with an "S".
SELECT * FROM Employees WHERE LastName LIKE 'S%'

2.8 Select the sum of all the departments' budgets.
SELECT SUM(Budget) FROM Departments

2.9 Select the number of employees in each department (you only need to show the department code and the number of employees).
SELECT Department, COUNT(*) FROM Employees GROUP BY Department 

2.10 Select all the data of employees, including each employee's department's data.
SELECT * FROM Employees LEFT JOIN Departments ON Department = Code

2.11 Select the name and last name of each employee, along with the name and budget of the employee's department.
SELECT Employees.Name, Employees.LastName, Departments.Name, Departments.Budget FROM Employees LEFT JOIN Departments ON Department = Code

2.12 Select the name and last name of employees working for departments with a budget greater than $60,000.
SELECT Employees.Name, Employees.LastName FROM Employees LEFT JOIN Departments ON Department = Code WHERE Departments.Budget > 60000

2.13 Select the departments with a budget larger than the average budget of all the departments.
SELECT * FROM Departments WHERE Budget > (SELECT AVG(Budget) FROM Departments)

2.14 Select the names of departments with more than two employees.
SELECT Departments.Name FROM Employees INNER JOIN Departments ON Department = Code GROUP BY Departments.Name HAVING COUNT(*) > 2;

2.15 Very Important - Select the name and last name of employees working for departments with second lowest budget.
SELECT Name, LastName FROM Employees WHERE Department = (SELECT Code FROM Departments ORDER BY Budget LIMIT 1 OFFSET 1)

2.16  Add a new department called "Quality Assurance", with a budget of $40,000 and departmental code 11. 
And Add an employee called "Mary Moore" in that department, with SSN 847-21-9811.
INSERT INTO Employees VALUES (847219811, 'Mary', 'Moore', 11)

2.17 Reduce the budget of all departments by 10%.
UPDATE Departments SET Budget = Budget * 0.9

2.18 Reassign all employees from the Research department (code 77) to the IT department (code 14).
UPDATE Employees SET Department = 14 WHERE Department = 77

2.19 Delete from the table all employees in the IT department (code 14).
DELETE FROM Employees WHERE Department = 14

2.20 Delete from the table all employees who work in departments with a budget greater than or equal to $60,000.
DELETE FROM Employees WHERE Department IN (SELECT Code FROM Departments WHERE Budget >= 60000)

2.21 Delete from the table all employees.
DELETE FROM Employees




3.1 Select all warehouses.
SELECT * FROM Warehouses 

3.2 Select all boxes with a value larger than $150.
SELECT * FROM Boxes WHERE Value > 150

3.3 Select all distinct contents in all the boxes.
SELECT DISTINCT Contents FROM Boxes 

3.4 Select the average value of all the boxes
SELECT AVG(Value) FROM Boxes

3.5 Select the warehouse code and the average value of the boxes in each warehouse.
SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse

3.6 Same as previous exercise, but select only those warehouses where the average value of the boxes is greater than 150.
SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150

3.7 Select the code of each box, along with the name of the city the box is located in.
SELECT Boxes.Code, Warehouses.Location FROM Boxes LEFT JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code

3.8 Select the warehouse codes, along with the number of boxes in each warehouse. 
Optionally, take into account that some warehouses are empty (i.e., the box count should show up as zero, instead of omitting the warehouse from the result).
SELECT Warehouse, COUNT(*) FROM Boxes GROUP BY Warehouse

3.9 Select the codes of all warehouses that are saturated (a warehouse is saturated if the number of boxes in it is larger than the warehouse's capacity).
SELECT Code FROM Warehouses WHERE Capacity < (SELECT COUNT(*) FROM Boxes WHERE Warehouse = Warehouses.Code)

3.10 Select the codes of all the boxes located in Chicago.
SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago')

3.11 Create a new warehouse in New York with a capacity for 3 boxes.
INSERT INTO Warehouses VALUES (6, 'New York', 3)

3.12 Create a new box, with code "H5RT", containing "Papers" with a value of $200, and located in warehouse 2.
INSERT INTO Boxes VALUES ('H5RT', 'Papers', 200, 2)

3.13 Reduce the value of all boxes by 15%.
UPDATE Boxes SET Value = Value * 0.85

3.14 Remove all boxes with a value lower than $100.
DELETE FROM Boxes WHERE Value < 100

3.15 Remove all boxes from saturated warehouses.



3.16 Add Index for column "Warehouse" in table "boxes"
    -- !!!NOTE!!!: index should NOT be used on small tables in practice
CREATE INDEX INDEX_WAREHOUSE ON Boxes (warehouse);

3.17 Print all the existing indexes
    -- !!!NOTE!!!: index should NOT be used on small tables in practice


3.18 Remove (drop) the index you added just
    -- !!!NOTE!!!: index should NOT be used on small tables in practice




4.1 Select the title of all movies.
SELECT Title FROM Movies

4.2 Show all the distinct ratings in the database.
SELECT DISTINCT rating FROM Movies

4.3  Show all unrated movies.
SELECT * FROM Movies WHERE Rating IS NULL

4.4 Select all movie theaters that are not currently showing a movie.
SELECT * FROM MovieTheaters WHERE Movie IS NULL

4.5 Select all data from all movie theaters 
    -- and, additionally, the data from the movie that is being shown in the theater (if one is being shown).
SELECT MovieTheaters.*, Movies.Title FROM MovieTheaters INNER JOIN Movies ON MovieTheaters.Movie = Movies.Code

4.6 Select all data from all movies and, if that movie is being shown in a theater, show the data from the theater.
SELECT * FROM Movies LEFT JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie

4.7 Show the titles of movies not currently being shown in any theaters.
SELECT Movies.Title FROM MovieTheaters RIGHT JOIN Movies ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Movie IS NULL

4.8 Add the unrated movie "One, Two, Three".
INSERT INTO Movies(Title,Rating) VALUES('One, Two, Three',NULL);

4.9 Set the rating of all unrated movies to "G".
UPDATE Movies SET Rating = 'G' WHERE Rating IS NULL

4.10 Remove movie theaters projecting movies rated "NC-17".
DELETE FROM MovieTheaters WHERE Movie = (SELECT Code FROM Movies WHERE Rating = 'NC-17')


















