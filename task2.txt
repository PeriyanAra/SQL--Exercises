1.1 Select the names of all the products in the store.
SELECT Name FROM Products 

1.2 Select the names and the prices of all the products in the store.
SELECT Name, Price FROM Products

1.3 Select the name of the products with a price less than or equal to $200.
SELECT Name FROM Products WHERE Price <= 200

1.4 Select all the products with a price between $60 and $120.
SELECT * FROM Products WHERE Price BETWEEN 60 AND 120

1.5 Select the name and price in cents (i.e., the price must be multiplied by 100).
SELECT Name, Price * 100 FROM Products

1.6 Compute the average price of all the products.
SELECT AVG(Price) FROM Products

1.7 Compute the average price of all products with manufacturer code equal to 2.
SELECT AVG(Price) FROM Products WHERE Manufacturer = 2

1.8 Compute the number of products with a price larger than or equal to $180.
SELECT COUNT(*) FROM Products WHERE Price >= 180

1.9 Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name (in ascending order).
SELECT Name, Price FROM Products WHERE Price >= 180 ORDER BY price, name

1.10 Select all the data from the products, including all the data for each product's manufacturer.
SELECT * FROM Products LEFT JOIN Manufacturers ON Products.Manufacturer = Manufacturers.Code

1.11 Select the product name, price, and manufacturer name of all the products.
SELECT Products.Name, Products.Price, Manufacturers.Name FROM Products LEFT JOIN Manufacturers ON Products.Manufacturer = Manufacturers.Code

1.12 Select the average price of each manufacturer's products, showing only the manufacturer's code.
SELECT Manufacturer, AVG(Price) FROM Products GROUP BY Manufacturer

1.13 Select the average price of each manufacturer's products, showing the manufacturer's name.
SELECT Manufacturers.Name, AVG(Products.Price) FROM Products LEFT JOIN Manufacturers ON Products.Manufacturer = Manufacturers.code GROUP BY Products.Manufacturer

1.14 Select the names of manufacturer whose products have an average price larger than or equal to $150.
SELECT Manufacturers.Name, AVG(Products.Price) FROM Manufacturers LEFT JOIN Products ON Products.Manufacturer = Manufacturers.code GROUP BY Manufacturers.name HAVING AVG(Products.Price) >= 150

1.15 Select the name and price of the cheapest product.
SELECT Name, Price FROM Products ORDER BY Price LIMIT 1

1.16 Select the name of each manufacturer along with the name and price of its most expensive product.


1.17 Add a new product: Loudspeakers, $70, manufacturer 2.
INSERT INTO Products VALUES (11, 'Loudspeakers', 70, 2)

1.18 Update the name of product 8 to "Laser Printer".
UPDATE Products SET Name = 'Laser Printer' WHERE Code = 8

1.19 Apply a 10% discount to all products.
UPDATE Products SET Price = Price - Price * 10 / 100

1.20 Apply a 10% discount to all products with a price larger than or equal to $120.
UPDATE Products SET Price = Price - Price * 10 / 100 WHERE Price >= 120



2.1 Select the last name of all employees.
SELECT lastName FROM Employees

2.2 Select the last name of all employees, without duplicates.
SELECT DISTINCT lastName FROM Employees

2.3 Select all the data of employees whose last name is "Smith".
SELECT * FROM Employees WHERE LastName = 'Smith'

2.4 Select all the data of employees whose last name is "Smith" or "Doe".
SELECT * FROM Employees WHERE LastName = 'Smith' OR  LastName = 'Doe'

2.5 Select all the data of employees that work in department 14.
SELECT * FROM Employees WHERE Department = 14

2.6 Select all the data of employees that work in department 37 or department 77.
SELECT * FROM Employees WHERE Department = 37 OR Department = 77

2.7 Select all the data of employees whose last name begins with an "S".
SELECT * FROM Employees WHERE LastName LIKE 'S%'

2.8 Select the sum of all the departments' budgets.
SELECT SUM(Budget) FROM Departments

2.9 Select the number of employees in each department (you only need to show the department code and the number of employees).
SELECT Department, COUNT(*) FROM Employees GROUP BY Department 

2.10 Select all the data of employees, including each employee's department's data.
SELECT * FROM Employees LEFT JOIN Departments ON Department = Code

2.11 Select the name and last name of each employee, along with the name and budget of the employee's department.
SELECT Employees.Name, Employees.LastName, Departments.Name, Departments.Budget FROM Employees LEFT JOIN Departments ON Department = Code

2.12 Select the name and last name of employees working for departments with a budget greater than $60,000.
SELECT Employees.Name, Employees.LastName FROM Employees LEFT JOIN Departments ON Department = Code WHERE Departments.Budget > 60000

2.13 Select the departments with a budget larger than the average budget of all the departments.
SELECT * FROM Departments WHERE Budget > (SELECT AVG(Budget) FROM Departments)

2.14 Select the names of departments with more than two employees.
SELECT Departments.Name FROM Employees INNER JOIN Departments ON Department = Code GROUP BY Departments.Name HAVING COUNT(*) > 2;

2.15 Very Important - Select the name and last name of employees working for departments with second lowest budget.
SELECT Name, LastName FROM Employees WHERE Department = (SELECT Code FROM Departments ORDER BY Budget LIMIT 1 OFFSET 1)

2.16  Add a new department called "Quality Assurance", with a budget of $40,000 and departmental code 11. 
And Add an employee called "Mary Moore" in that department, with SSN 847-21-9811.
INSERT INTO Employees VALUES (847219811, 'Mary', 'Moore', 11)

2.17 Reduce the budget of all departments by 10%.
UPDATE Departments SET Budget = Budget * 0.9

2.18 Reassign all employees from the Research department (code 77) to the IT department (code 14).
UPDATE Employees SET Department = 14 WHERE Department = 77

2.19 Delete from the table all employees in the IT department (code 14).
DELETE FROM Employees WHERE Department = 14

2.20 Delete from the table all employees who work in departments with a budget greater than or equal to $60,000.
DELETE FROM Employees WHERE Department IN (SELECT Code FROM Departments WHERE Budget >= 60000)

2.21 Delete from the table all employees.
DELETE FROM Employees




3.1 Select all warehouses.
SELECT * FROM Warehouses 

3.2 Select all boxes with a value larger than $150.
SELECT * FROM Boxes WHERE Value > 150

3.3 Select all distinct contents in all the boxes.
SELECT DISTINCT Contents FROM Boxes 

3.4 Select the average value of all the boxes
SELECT AVG(Value) FROM Boxes

3.5 Select the warehouse code and the average value of the boxes in each warehouse.
SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse

3.6 Same as previous exercise, but select only those warehouses where the average value of the boxes is greater than 150.
SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150

3.7 Select the code of each box, along with the name of the city the box is located in.
SELECT Boxes.Code, Warehouses.Location FROM Boxes LEFT JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code

3.8 Select the warehouse codes, along with the number of boxes in each warehouse. 
Optionally, take into account that some warehouses are empty (i.e., the box count should show up as zero, instead of omitting the warehouse from the result).
SELECT Warehouse, COUNT(*) FROM Boxes GROUP BY Warehouse

3.9 Select the codes of all warehouses that are saturated (a warehouse is saturated if the number of boxes in it is larger than the warehouse's capacity).
SELECT Code FROM Warehouses WHERE Capacity < (SELECT COUNT(*) FROM Boxes WHERE Warehouse = Warehouses.Code)

3.10 Select the codes of all the boxes located in Chicago.
SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago')

3.11 Create a new warehouse in New York with a capacity for 3 boxes.
INSERT INTO Warehouses VALUES (6, 'New York', 3)

3.12 Create a new box, with code "H5RT", containing "Papers" with a value of $200, and located in warehouse 2.
INSERT INTO Boxes VALUES ('H5RT', 'Papers', 200, 2)

3.13 Reduce the value of all boxes by 15%.
UPDATE Boxes SET Value = Value * 0.85

3.14 Remove all boxes with a value lower than $100.
DELETE FROM Boxes WHERE Value < 100

3.15 Remove all boxes from saturated warehouses.



3.16 Add Index for column "Warehouse" in table "boxes"
    -- !!!NOTE!!!: index should NOT be used on small tables in practice
CREATE INDEX INDEX_WAREHOUSE ON Boxes (warehouse);

3.17 Print all the existing indexes
    -- !!!NOTE!!!: index should NOT be used on small tables in practice


3.18 Remove (drop) the index you added just
    -- !!!NOTE!!!: index should NOT be used on small tables in practice




4.1 Select the title of all movies.
SELECT Title FROM Movies

4.2 Show all the distinct ratings in the database.
SELECT DISTINCT rating FROM Movies

4.3  Show all unrated movies.
SELECT * FROM Movies WHERE Rating IS NULL

4.4 Select all movie theaters that are not currently showing a movie.
SELECT * FROM MovieTheaters WHERE Movie IS NULL

4.5 Select all data from all movie theaters 
    -- and, additionally, the data from the movie that is being shown in the theater (if one is being shown).
SELECT MovieTheaters.*, Movies.Title FROM MovieTheaters INNER JOIN Movies ON MovieTheaters.Movie = Movies.Code

4.6 Select all data from all movies and, if that movie is being shown in a theater, show the data from the theater.
SELECT * FROM Movies LEFT JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie

4.7 Show the titles of movies not currently being shown in any theaters.
SELECT Movies.Title FROM MovieTheaters RIGHT JOIN Movies ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Movie IS NULL

4.8 Add the unrated movie "One, Two, Three".
INSERT INTO Movies(Title,Rating) VALUES('One, Two, Three',NULL);

4.9 Set the rating of all unrated movies to "G".
UPDATE Movies SET Rating = 'G' WHERE Rating IS NULL

4.10 Remove movie theaters projecting movies rated "NC-17".
DELETE FROM MovieTheaters WHERE Movie = (SELECT Code FROM Movies WHERE Rating = 'NC-17')





5.1 Select the name of all the pieces.
SELECT Name FROM Pieces

5.2  Select all the providers' data.
SELECT * FROM Providers

5.3 Obtain the average price of each piece (show only the piece code and the average price).
SELECT Piece, AVG(Price) FROM Provides GROUP BY Piece

5.4  Obtain the names of all providers who supply piece 1.
SELECT Providers.Name FROM Providers INNER JOIN Provides ON Providers.Code = Provides.Provider WHERE Provides.Piece = 1

5.5 Select the name of pieces provided by provider with code "HAL".
SELECT Pieces.Name FROM Pieces INNER JOIN Provides ON Pieces.Code = Provides.Piece WHERE Provides.Provider = 'HAL'

5.6
-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-- Interesting and important one.
-- For each piece, find the most expensive offering of that piece and include the piece name, provider name, and price 
-- (note that there could be two providers who supply the same piece at the most expensive price).
SELECT Pieces.Name, Providers.Name, Provides.Price FROM Provides LEFT JOIN Pieces ON Provides.Piece = Pieces.Code LEFT JOIN Providers ON Provides.Provider = Providers.Code WHERE Provides.Price = (SELECT MAX(Price) FROM Provides WHERE Provides.Piece = Pieces.Code)

5.7 Add an entry to the database to indicate that "Skellington Supplies" (code "TNBC") will provide sprockets (code "1") for 7 cents each.
INSERT INTO Provides VALUES (1, 'TNBC', 7)

5.8 Increase all prices by one cent.
UPDATE Provides SET Price = Price - 1

5.9 Update the database to reflect that "Susan Calvin Corp." (code "RBT") will not supply bolts (code 4).
DELETE FROM Provides WHERE Provider = 'RBT' AND Piece = 4

5.10 Update the database to reflect that "Susan Calvin Corp." (code "RBT") will not supply any pieces 
    -- (the provider should still remain in the database).
DELETE FROM Provides WHERE Provider = 'RBT'




6.1 List all the scientists' names, their projects' names, 
    -- and the hours worked by that scientist on each project, 
    -- in alphabetical order of project name, then scientist name.
SELECT Scientists.Name, Projects.Name, Projects.Hours FROM AssignedTo INNER JOIN Scientists ON AssignedTo.Scientist = Scientists.SSN INNER JOIN Projects ON AssignedTo.Project = Projects.Code ORDER BY Projects.Name, Scientists.Name

6.2 Select the project names which are not assigned yet
SELECT Name FROM Projects  WHERE Code NOT IN (SELECT Project FROM AssignedTo)



7.1 Who receieved a 1.5kg package?
    -- The result is "Al Gore's Head".
SELECT Client.Name FROM Client INNER JOIN Package ON Client.AccountNumber = Package.Recipient WHERE Package.Weight = 1.5

7.2 What is the total weight of all the packages that he sent?
SELECT SUM(Package.Weight) FROM Package INNER JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Al Gore\'s Head'




8.1 Obtain the names of all physicians that have performed a medical procedure they have never been certified to perform.
SELECT Physician.Name 
FROM Physician
INNER JOIN Trained_In ON Physician.EmployeeID = Trained_In.Physician
INNER JOIN Undergoes ON Physician.EmployeeID = Undergoes.Physician
WHERE Trained_In.CertificationExpires < Undergoes.DateUndergoes

8.2 Same as the previous query, but include the following information in the results: Physician name, name of procedure, date when the procedure was carried out, name of the patient the procedure was carried out on.
SELECT Physician.Name, Procedures.Name, Undergoes.DateUndergoes, Trained_In.CertificationExpires, Patient.Name
FROM Undergoes
INNER JOIN Physician ON Undergoes.Physician = Physician.EmployeeID
INNER JOIN Patient ON Undergoes.Patient = Patient.SSN
INNER JOIN Procedures ON Undergoes.Procedures = Procedures.Code
INNER JOIN Trained_In ON Physician.EmployeeID = Trained_In.Physician
WHERE Trained_In.CertificationExpires < Undergoes.DateUndergoes

8.3 Obtain the names of all physicians that have performed a medical procedure that they are certified to perform, but such that the procedure was done at a date (Undergoes.Date) after the physician's certification expired (Trained_In.CertificationExpires).
SELECT Physician.Name 
FROM Physician
INNER JOIN Trained_In ON Physician.EmployeeID = Trained_In.Physician
INNER JOIN Undergoes ON Physician.EmployeeID = Undergoes.Physician
WHERE Trained_In.CertificationExpires < Undergoes.DateUndergoes

8.4 Same as the previous query, but include the following information in the results: Physician name, name of procedure, date when the procedure was carried out, name of the patient the procedure was carried out on, and date when the certification expired.
SELECT Physician.Name, Procedures.Name, Undergoes.DateUndergoes, Trained_In.CertificationExpires, Patient.Name
FROM Undergoes
INNER JOIN Physician ON Undergoes.Physician = Physician.EmployeeID
INNER JOIN Patient ON Undergoes.Patient = Patient.SSN
INNER JOIN Procedures ON Undergoes.Procedures = Procedures.Code
INNER JOIN Trained_In ON Physician.EmployeeID = Trained_In.Physician
WHERE Trained_In.CertificationExpires < Undergoes.DateUndergoes

8.5 Obtain the information for appointments where a patient met with a physician other than his/her primary care physician. Show the following information: Patient name, physician name, nurse name (if any), start and end time of appointment, examination room, and the name of the patient's primary care physician.
SELECT Pt.Name AS Patient, Ph.Name AS Physician, N.Name AS Nurse, A.Start, A.End, A.ExaminationRoom, PhPCP.Name AS PCP
  FROM Patient Pt, Physician Ph, Physician PhPCP, Appointment A 
  LEFT JOIN Nurse N 
  ON A.PrepNurse = N.EmployeeID
 WHERE A.Patient = Pt.SSN
   AND A.Physician = Ph.EmployeeID
   AND Pt.PCP = PhPCP.EmployeeID
   AND A.Physician <> Pt.PCP;

8.6 The Patient field in Undergoes is redundant, since we can obtain it from the Stay table. There are no constraints in force to prevent inconsistencies between these two tables. More specifically, the Undergoes table may include a row where the patient ID does not match the one we would obtain from the Stay table through the Undergoes.Stay foreign key. Select all rows from Undergoes that exhibit this inconsistency.
SELECT Undergoes.*, Stay.*
FROM Undergoes
INNER JOIN Stay ON Undergoes.Stay = Stay.StayID
WHERE Undergoes.Patient != Stay.Patient

8.7 Obtain the names of all the nurses who have ever been on call for room 123.
SELECT DISTINCT Nurse.Name
FROM On_Call
INNER JOIN Nurse ON On_Call.Nurse = Nurse.EmployeeID
INNER JOIN Block ON On_Call.BlockCode = Block.BlockCode
INNER JOIN Room ON Block.BlockCode = Room.BlockCode
WHERE Room.RoomNumber = 123

8.8 The hospital has several examination rooms where appointments take place. Obtain the number of appointments that have taken place in each examination room.
SELECT ExaminationRoom, COUNT(*) 
FROM Appointment
GROUP BY ExaminationRoom

8.9 Obtain the names of all patients (also include, for each patient, the name of the patient's primary care physician), such that \emph{all} the following are true:
    -- The patient has been prescribed some medication by his/her primary care physician.
    -- The patient has undergone a procedure with a cost larger that $5,000
    -- The patient has had at least two appointment where the nurse who prepped the appointment was a registered nurse.
    -- The patient's primary care physician is not the head of any department.
SELECT DISTINCT Patient.Name as Patient, Physician.Name as Doctor
FROM Patient
INNER JOIN Physician ON Patient.PCP = Physician.EmployeeID
INNER JOIN Prescribes ON Patient.SSN = Prescribes.Patient
INNER JOIN Undergoes ON Patient.SSN = Undergoes.Patient
INNER JOIN Procedures ON Undergoes.Procedures = Procedures.Code
LEFT JOIN Department ON Physician.EmployeeID = Department.Head
LEFT JOIN Appointment ON Patient.SSN = Appointment.Patient
WHERE Procedures.Cost > 5000
AND Physician.EmployeeID NOT IN (SELECT Department.Head FROM Department)
AND Appointment.PrepNurse IS NOT NULL

-- 9.1 give the total number of recordings in this table
SELECT COUNT(*) FROM cran

-- 9.2 the number of packages listed in this table?
SELECT COUNT(DISTINCT package) FROM cran;

-- 9.3 How many times the package "Rcpp" was downloaded?
SELECT COUNT(DISTINCT package) FROM cran WHERE package = 'Rcpp';

-- 9.4 How many recordings are from China ("CN")?
SELECT COUNT(DISTINCT package) FROM cran WHERE country = 'CN';

-- 9.5 Give the package name and how many times they're downloaded. Order by the 2nd column descently.
SELECT package, COUNT(*) FROM cran GROUP BY package ORDER BY 2 DESC;

-- 9.6 Give the package ranking (based on how many times it was downloaded) during 9AM to 11AM
SELECT a.package, COUNT(*) FROM (SELECT * FROM cran WHERE substr(time, 1, 5)<"11:00" and substr(time, 1, 5)>"09:00") as a GROUP BY a.package ORDER BY 2 DESC;

-- 9.7 How many recordings are from China ("CN") or Japan("JP") or Singapore ("SG")?
SELECT COUNT(*) FROM cran WHERE country IN ('CN' , 'JP', 'SG');

-- 9.8 Print the countries whose downloaded are more than the downloads from China ("CN")
SELECT T.country FROM (SELECT country, COUNT(*) AS downloads FROM cran GROUP BY country) AS T WHERE T.downloads > (SELECT COUNT(*) FROM cran WHERE country = 'CN');

-- 9.9 Print the average length of the package name of all the UNIQUE packages
SELECT AVG(LENGTH(temp.packages)) FROM (SELECT DISTINCT package as packages FROM cran) temp;

-- 9.10 Get the package whose downloading count ranks 2nd (print package name and it's download count).
SELECT T.a package, T.b count FROM (SELECT package a, count(*) b FROM cran
GROUP BY package ORDER BY b DESC LIMIT 2) AS T
ORDER BY T.b ASC
LIMIT 1;

-- 9.11 Print the name of the package whose download count is bigger than 1000.
SELECT package FROM cran GROUP BY package HAVING COUNT(*) > 1000

-- 9.12 The field "r_os" is the operating system of the users.
    -- 	Here we would like to know what main system we have (ignore version number), the relevant counts, and the proportion (in percentage).






-- 10.1 Join table PEOPLE and ADDRESS, but keep only one address information for each person (we don't mind which record we take for each person). 
    -- i.e., the joined table should have the same number of rows as table PEOPLE
SELECT PEOPLE.name, T.address
FROM PEOPLE
LEFT JOIN (
SELECT id, MAX(address) as address 
FROM ADDRESS
GROUP BY id)
AS T
ON PEOPLE.id = T.id; 


-- 10.2 Join table PEOPLE and ADDRESS, but ONLY keep the LATEST address information for each person. 
    -- i.e., the joined table should have the same number of rows as table PEOPLE

SELECT PEOPLE.id, PEOPLE.name, T.address FROM PEOPLE LEFT JOIN (SELECT id, address, MAX(updatedate)
FROM ADDRESS GROUP BY id) AS T ON PEOPLE.id = T.id; 




